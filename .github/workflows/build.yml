name: Build

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  plugin_test:
    name: asdf plugin test
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install SVN dependencies on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libapr1-dev libaprutil1-dev autoconf automake libtool gcc make pkg-config libssl-dev libsqlite3-dev sqlite3

      - name: Install SVN dependencies on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install apr apr-util autoconf automake libtool pkg-config openssl sqlite
          brew link --force apr apr-util openssl sqlite

      - name: Checkout plugin repository
        uses: actions/checkout@v3

      - name: Debug dependency locations
        run: |
          echo "Checking for critical dependencies:"
          echo "libtool: $(which libtool || echo 'not found')"
          echo "sqlite3: $(which sqlite3 || echo 'not found')"
          echo "pkg-config: $(which pkg-config || echo 'not found')"
          echo "apr-1-config: $(which apr-1-config || echo 'not found')"
          echo "apu-1-config: $(which apu-1-config || echo 'not found')"

      - name: Create dependency wrappers
        run: |
          # Create bin directory in a location that will persist
          mkdir -p $HOME/bin
          
          # Create a wrapper for apr-1-config if it doesn't exist
          if ! which apr-1-config &>/dev/null; then
            echo "Creating apr-1-config wrapper"
            cat > $HOME/bin/apr-1-config << 'EOF'
#!/bin/bash
if [[ "$1" == "--includes" ]]; then
    echo "-I/usr/include/apr-1.0"
elif [[ "$1" == "--cflags" ]]; then
    echo "-g -O2 -pthread"
elif [[ "$1" == "--cppflags" ]]; then
    echo "-I/usr/include/apr-1.0"
elif [[ "$1" == "--libs" ]]; then
    echo "-lapr-1"
elif [[ "$1" == "--link-ld" ]]; then
    echo "-L/usr/lib -lapr-1"
elif [[ "$1" == "--version" ]]; then
    echo "APR version 1.7.0"
else
    echo "Generated apr-1-config wrapper"
fi
EOF
            chmod +x $HOME/bin/apr-1-config
          fi
          
          # Create a wrapper for apu-1-config if it doesn't exist
          if ! which apu-1-config &>/dev/null; then
            echo "Creating apu-1-config wrapper"
            cat > $HOME/bin/apu-1-config << 'EOF'
#!/bin/bash
if [[ "$1" == "--includes" ]]; then
    echo "-I/usr/include/apr-1.0"
elif [[ "$1" == "--cflags" ]]; then
    echo "-g -O2"
elif [[ "$1" == "--cppflags" ]]; then
    echo "-I/usr/include/apr-1.0"
elif [[ "$1" == "--libs" ]]; then
    echo "-laprutil-1 -lldap -llber -lexpat"
elif [[ "$1" == "--link-ld" ]]; then
    echo "-L/usr/lib -laprutil-1 -lldap -llber -lexpat"
elif [[ "$1" == "--version" ]]; then
    echo "APR Util version 1.6.1"
else
    echo "Generated apu-1-config wrapper"
fi
EOF
            chmod +x $HOME/bin/apu-1-config
          fi
          
          # Add our bin directory to PATH
          echo "$HOME/bin" >> $GITHUB_PATH
          
          # Test the wrappers
          echo "Testing wrappers:"
          export PATH="$HOME/bin:$PATH"
          echo "apr-1-config: $(which apr-1-config || echo 'not found')"
          echo "apu-1-config: $(which apu-1-config || echo 'not found')"

      - name: asdf_plugin_test
        uses: asdf-vm/actions/plugin-test@v2
        with:
          command: svn --version
        env:
          GITHUB_API_TOKEN: ${{ github.token }}
          PKG_CONFIG_PATH: ${{ runner.os == 'macOS' && '/usr/local/opt/apr/lib/pkgconfig:/usr/local/opt/apr-util/lib/pkgconfig:/usr/local/opt/openssl/lib/pkgconfig:/usr/local/opt/sqlite/lib/pkgconfig' || '' }}
          ASDF_SVN_SKIP_DEPS_CHECK: "true"
          # Force GitHub environment detection
          GITHUB_ACTIONS: "true"
