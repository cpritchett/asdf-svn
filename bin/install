#!/usr/bin/env bash

set -euo pipefail

current_script_path=${BASH_SOURCE[0]}
plugin_dir=$(dirname "$(dirname "$current_script_path")")

# shellcheck source=./lib/utils.bash
source "${plugin_dir}/lib/utils.bash"

# Helper: Find a config script in PATH or Homebrew
find_config_script() {
    local script_name="$1"
    # Check in PATH
    if command -v "$script_name" &>/dev/null; then
        command -v "$script_name"
        return 0
    fi
    # Check Homebrew opt locations (macOS)
    if [ "$(uname)" = "Darwin" ] && command -v brew &>/dev/null; then
        local brew_prefix
        brew_prefix="$(brew --prefix)"
        if [ -x "$brew_prefix/opt/apr/bin/$script_name" ]; then
            echo "$brew_prefix/opt/apr/bin/$script_name"
            return 0
        fi
        if [ -x "$brew_prefix/opt/apr-util/bin/$script_name" ]; then
            echo "$brew_prefix/opt/apr-util/bin/$script_name"
            return 0
        fi
    fi
    return 1
}

# Dependency check
check_build_dependencies() {
    local missing=false
    for cmd in autoconf automake libtool gcc make pkg-config; do
        if ! command -v "$cmd" &>/dev/null; then
            echo "Missing build tool: $cmd"
            missing=true
        fi
    done

    if ! find_config_script "apr-1-config" &>/dev/null; then
        echo "Missing dependency: apr (Apache Portable Runtime)"
        echo "  For macOS: brew install apr"
        echo "  For Ubuntu/Debian: apt-get install libapr1-dev"
        missing=true
    fi

    if ! find_config_script "apu-1-config" &>/dev/null; then
        echo "Missing dependency: apr-util (Apache Portable Runtime Utilities)"
        echo "  For macOS: brew install apr-util"
        echo "  For Ubuntu/Debian: apt-get install libaprutil1-dev"
        missing=true
    fi

    if ! pkg-config --exists openssl || ! command -v openssl &>/dev/null; then
        echo "Missing dependency: openssl"
        echo "  For macOS: brew install openssl"
        echo "  For Ubuntu/Debian: apt-get install libssl-dev"
        missing=true
    fi

    if ! pkg-config --exists sqlite3 || ! command -v sqlite3 &>/dev/null; then
        echo "Missing dependency: sqlite3"
        echo "  For macOS: brew install sqlite"
        echo "  For Ubuntu/Debian: apt-get install libsqlite3-dev"
        missing=true
    fi

    if [ "$missing" = true ]; then
        echo "Please install missing dependencies and try again"
        echo "See 'asdf help svn deps' for more information"
        exit 1
    fi
}

# Find apr-1-config
find_apr_config() {
    find_config_script "apr-1-config" || {
        echo "Failed to find apr-1-config"
        exit 1
    }
}

# Find apu-1-config
find_apu_config() {
    find_config_script "apu-1-config" || {
        echo "Failed to find apu-1-config"
        exit 1
    }
}

# Build and install from source
install_from_source() {
    local version="$1"
    local install_path="$2"
    local source_path="$ASDF_DOWNLOAD_PATH"
    local prefix="${install_path%/bin}"

    local configure_options="${ASDF_SVN_CONFIGURE_OPTIONS:-}"
    local concurrency="${ASDF_SVN_CONCURRENCY:-$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 2)}"

    local apr_config
    apr_config="$(find_apr_config)"
    local apu_config
    apu_config="$(find_apu_config)"

    # Check for utf8proc or fallback to internal version
    local utf8proc_option=""
    if pkg-config --exists utf8proc 2>/dev/null; then
        echo "Found utf8proc via pkg-config"
    elif [ -d "$(brew --prefix 2>/dev/null)/opt/utf8proc" ] 2>/dev/null; then
        echo "Found utf8proc in Homebrew, but pkg-config isn't detecting it"
        # Set PKG_CONFIG_PATH to help find utf8proc
        if [ -d "$(brew --prefix)/opt/utf8proc/lib/pkgconfig" ]; then
            export PKG_CONFIG_PATH="$(brew --prefix)/opt/utf8proc/lib/pkgconfig:${PKG_CONFIG_PATH:-}"
            echo "Added utf8proc to PKG_CONFIG_PATH"
        else
            # Fallback to internal utf8proc if pkg-config file isn't found
            utf8proc_option="--with-utf8proc=internal"
            echo "Using internal utf8proc library"
        fi
    else
        # Use internal utf8proc implementation
        utf8proc_option="--with-utf8proc=internal"
        echo "Using internal utf8proc library"
    fi

    (
        cd "$source_path"

        echo "Configuring Subversion ${version}..."
        echo "Using APR config: $apr_config"
        echo "Using APR-UTIL config: $apu_config"

        ./configure --prefix="$prefix" \
            --with-apr="$apr_config" \
            --with-apr-util="$apu_config" \
            --with-ssl \
            --with-sqlite3 \
            --without-berkeley-db \
            --with-utf8proc=internal \
            "${configure_options}"

        echo "Building Subversion ${version} with ${concurrency} parallel jobs..."
        make -j"${concurrency}"

        echo "Installing Subversion ${version} to ${prefix}..."
        make install

        # Verify installation
        if [ -x "${prefix}/bin/svn" ]; then
            echo "Subversion ${version} installation successful!"
        else
            echo "Subversion installation failed. The svn binary was not created."
            exit 1
        fi
    ) || (
        echo "Subversion installation failed. See error messages above."
        exit 1
    )
}

# Main
echo "Installing Subversion version ${ASDF_INSTALL_VERSION}..."
check_build_dependencies
install_from_source "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
