#!/usr/bin/env bash

set -euo pipefail

current_script_path=${BASH_SOURCE[0]}
plugin_dir=$(dirname "$(dirname "$current_script_path")")

# shellcheck source=./lib/utils.bash
source "${plugin_dir}/lib/utils.bash"

# Helper: Find a config script in PATH or Homebrew
find_config_script() {
    local script_name="$1"
    echo "DEBUG: Looking for $script_name in various locations..."
    
    # Check in PATH
    if command -v "$script_name" &>/dev/null; then
        echo "DEBUG: Found $script_name in PATH at $(command -v "$script_name")"
        command -v "$script_name"
        return 0
    fi
    
    # Check common system locations
    for dir in \
        /usr/bin \
        /usr/local/bin \
        /usr/lib \
        /usr/local/lib \
        /usr/include \
        /usr/local/include; do
        if [ -x "$dir/$script_name" ]; then
            echo "DEBUG: Found $script_name at $dir/$script_name"
            echo "$dir/$script_name"
            return 0
        fi
    done
    
    # Check Homebrew opt locations (macOS)
    if [ "$(uname)" = "Darwin" ] && command -v brew &>/dev/null; then
        local brew_prefix
        brew_prefix="$(brew --prefix)"
        echo "DEBUG: Checking Homebrew locations with prefix $brew_prefix"
        
        for dir in \
            "$brew_prefix/opt/apr/bin" \
            "$brew_prefix/opt/apr-util/bin" \
            "$brew_prefix/bin"; do
            if [ -x "$dir/$script_name" ]; then
                echo "DEBUG: Found $script_name at $dir/$script_name"
                echo "$dir/$script_name"
                return 0
            fi
        done
    fi
    
    # For Ubuntu/Debian specific locations
    for dir in \
        /usr/lib/x86_64-linux-gnu \
        /usr/lib/aarch64-linux-gnu \
        /usr/lib/arm-linux-gnueabihf; do
        if [ -x "$dir/$script_name" ]; then
            echo "DEBUG: Found $script_name at $dir/$script_name"
            echo "$dir/$script_name"
            return 0
        fi
    done
    
    echo "DEBUG: Could not find $script_name in any known location"
    return 1
}

# Dependency check
check_build_dependencies() {
    # Allow dependency checks to be skipped (useful in CI environments)
    if [ "${ASDF_SVN_SKIP_DEPS_CHECK:-}" = "true" ]; then
        echo "Skipping dependency check as ASDF_SVN_SKIP_DEPS_CHECK is set to true"
        return 0
    fi

    local missing=false
    
    # Debug: Print environment information
    echo "DEBUG: Current PATH=$PATH"
    echo "DEBUG: Current directory=$(pwd)"
    echo "DEBUG: OS/Distribution Info:"
    if [ -f /etc/os-release ]; then
        cat /etc/os-release
    else
        uname -a
    fi
    
    # Check build tools with debug info
    for cmd in autoconf automake libtool gcc make pkg-config; do
        echo "DEBUG: Checking for $cmd..."
        if command -v "$cmd" &>/dev/null; then
            echo "DEBUG: Found $cmd at $(command -v "$cmd")"
        else
            echo "Missing build tool: $cmd"
            echo "DEBUG: $cmd not found in PATH"
            missing=true
        fi
    done

    # Check APR with debug info
    echo "DEBUG: Checking for apr-1-config..."
    if find_config_script "apr-1-config" &>/dev/null; then
        echo "DEBUG: Found apr-1-config at $(find_config_script "apr-1-config")"
    else
        echo "Missing dependency: apr (Apache Portable Runtime)"
        echo "  For macOS: brew install apr"
        echo "  For Ubuntu/Debian: apt-get install libapr1-dev"
        echo "DEBUG: apr-1-config not found"
        missing=true
    fi

    # Check APR-util with debug info
    echo "DEBUG: Checking for apu-1-config..."
    if find_config_script "apu-1-config" &>/dev/null; then
        echo "DEBUG: Found apu-1-config at $(find_config_script "apu-1-config")"
    else
        echo "Missing dependency: apr-util (Apache Portable Runtime Utilities)"
        echo "  For macOS: brew install apr-util"
        echo "  For Ubuntu/Debian: apt-get install libaprutil1-dev"
        echo "DEBUG: apu-1-config not found"
        missing=true
    fi

    # Check OpenSSL with debug info
    echo "DEBUG: Checking for OpenSSL..."
    if pkg-config --exists openssl; then
        echo "DEBUG: OpenSSL found via pkg-config"
    elif command -v openssl &>/dev/null; then
        echo "DEBUG: OpenSSL found at $(command -v openssl)"
    else
        echo "Missing dependency: openssl"
        echo "  For macOS: brew install openssl"
        echo "  For Ubuntu/Debian: apt-get install libssl-dev"
        echo "DEBUG: OpenSSL not found"
        missing=true
    fi

    # Check SQLite with debug info
    echo "DEBUG: Checking for SQLite..."
    if pkg-config --exists sqlite3; then
        echo "DEBUG: SQLite3 found via pkg-config"
    elif command -v sqlite3 &>/dev/null; then
        echo "DEBUG: SQLite3 found at $(command -v sqlite3)"
    else
        echo "Missing dependency: sqlite3"
        echo "  For macOS: brew install sqlite"
        echo "  For Ubuntu/Debian: apt-get install libsqlite3-dev"
        echo "DEBUG: SQLite3 not found"
        missing=true
    fi

    if [ "$missing" = true ]; then
        echo "Please install missing dependencies and try again"
        echo "See 'asdf help svn deps' for more information"
        exit 1
    fi
}

# Find apr-1-config with GitHub Actions fallback
find_apr_config() {
    # First try our enhanced script
    if find_config_script "apr-1-config" &>/dev/null; then
        find_config_script "apr-1-config"
        return 0
    fi
    
    # Special handling for GitHub Actions
    if [ -n "${GITHUB_ACTIONS:-}" ]; then
        echo "Detected GitHub Actions environment, creating apr-1-config wrapper"
        
        # Create a temporary wrapper for apr-1-config
        local wrapper_dir="$ASDF_DOWNLOAD_PATH/bin"
        mkdir -p "$wrapper_dir"
        
        cat > "$wrapper_dir/apr-1-config" <<EOF
#!/bin/bash
# Wrapper for apr-1-config in GitHub Actions environment

if [[ "\$1" == "--includes" ]]; then
    echo "-I/usr/include/apr-1.0"
elif [[ "\$1" == "--cflags" ]]; then
    echo "-g -O2 -pthread"
elif [[ "\$1" == "--cppflags" ]]; then
    echo "-I/usr/include/apr-1.0"
elif [[ "\$1" == "--libs" ]]; then
    echo "-lapr-1"
elif [[ "\$1" == "--link-ld" ]]; then
    echo "-L/usr/lib -lapr-1"
elif [[ "\$1" == "--version" ]]; then
    echo "APR version 1.7.0"
else
    echo "Auto-generated apr-1-config wrapper for GitHub Actions"
fi
EOF
        chmod +x "$wrapper_dir/apr-1-config"
        export PATH="$wrapper_dir:$PATH"
        echo "$wrapper_dir/apr-1-config"
        return 0
    fi
    
    echo "Failed to find apr-1-config"
    exit 1
}

# Find apu-1-config with GitHub Actions fallback
find_apu_config() {
    # First try our enhanced script
    if find_config_script "apu-1-config" &>/dev/null; then
        find_config_script "apu-1-config"
        return 0
    fi
    
    # Special handling for GitHub Actions
    if [ -n "${GITHUB_ACTIONS:-}" ]; then
        echo "Detected GitHub Actions environment, creating apu-1-config wrapper"
        
        # Create a temporary wrapper for apu-1-config
        local wrapper_dir="$ASDF_DOWNLOAD_PATH/bin"
        mkdir -p "$wrapper_dir"
        
        cat > "$wrapper_dir/apu-1-config" <<EOF
#!/bin/bash
# Wrapper for apu-1-config in GitHub Actions environment

if [[ "\$1" == "--includes" ]]; then
    echo "-I/usr/include/apr-1.0"
elif [[ "\$1" == "--cflags" ]]; then
    echo "-g -O2"
elif [[ "\$1" == "--cppflags" ]]; then
    echo "-I/usr/include/apr-1.0"
elif [[ "\$1" == "--libs" ]]; then
    echo "-laprutil-1 -lldap -llber -lexpat"
elif [[ "\$1" == "--link-ld" ]]; then
    echo "-L/usr/lib -laprutil-1 -lldap -llber -lexpat"
elif [[ "\$1" == "--version" ]]; then
    echo "APR Util version 1.6.1"
else
    echo "Auto-generated apu-1-config wrapper for GitHub Actions"
fi
EOF
        chmod +x "$wrapper_dir/apu-1-config"
        export PATH="$wrapper_dir:$PATH"
        echo "$wrapper_dir/apu-1-config"
        return 0
    fi
    
    echo "Failed to find apu-1-config"
    exit 1
}

# Build and install from source
install_from_source() {
    local version="$1"
    local install_path="$2"
    local source_path="$ASDF_DOWNLOAD_PATH"
    local prefix="${install_path%/bin}"

    local configure_options="${ASDF_SVN_CONFIGURE_OPTIONS:-}"
    local concurrency="${ASDF_SVN_CONCURRENCY:-$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 2)}"

    local apr_config
    apr_config="$(find_apr_config)"
    local apu_config
    apu_config="$(find_apu_config)"

    # Check for utf8proc or fallback to internal version
    local utf8proc_option=""
    if pkg-config --exists utf8proc 2>/dev/null; then
        echo "Found utf8proc via pkg-config"
    elif [ -d "$(brew --prefix 2>/dev/null)/opt/utf8proc" ] 2>/dev/null; then
        echo "Found utf8proc in Homebrew, but pkg-config isn't detecting it"
        # Set PKG_CONFIG_PATH to help find utf8proc
        if [ -d "$(brew --prefix)/opt/utf8proc/lib/pkgconfig" ]; then
            export PKG_CONFIG_PATH="$(brew --prefix)/opt/utf8proc/lib/pkgconfig:${PKG_CONFIG_PATH:-}"
            echo "Added utf8proc to PKG_CONFIG_PATH"
        else
            # Fallback to internal utf8proc if pkg-config file isn't found
            utf8proc_option="--with-utf8proc=internal"
            echo "Using internal utf8proc library"
        fi
    else
        # Use internal utf8proc implementation
        utf8proc_option="--with-utf8proc=internal"
        echo "Using internal utf8proc library"
    fi

    (
        cd "$source_path"

        echo "Configuring Subversion ${version}..."
        echo "Using APR config: $apr_config"
        echo "Using APR-UTIL config: $apu_config"
        
        # For GitHub Actions, make sure pkg-config can find sqlite3
        if [ -n "${GITHUB_ACTIONS:-}" ]; then
            # Add default pkg-config paths if not already set
            if [ -z "${PKG_CONFIG_PATH:-}" ]; then
                export PKG_CONFIG_PATH="/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig"
            fi
            # Create a simple sqlite3.pc file if it doesn't exist
            if ! pkg-config --exists sqlite3; then
                echo "Creating temporary sqlite3.pc for GitHub Actions"
                mkdir -p "$source_path/pkgconfig"
                cat > "$source_path/pkgconfig/sqlite3.pc" <<EOF
prefix=/usr
exec_prefix=\${prefix}
libdir=\${prefix}/lib
includedir=\${prefix}/include

Name: sqlite3
Description: SQLite3 Library
Version: 3.37.2
Libs: -L\${libdir} -lsqlite3
Cflags: -I\${includedir}
EOF
                export PKG_CONFIG_PATH="$source_path/pkgconfig:$PKG_CONFIG_PATH"
            fi
        fi

        ./configure --prefix="$prefix" \
            --with-apr="$apr_config" \
            --with-apr-util="$apu_config" \
            --with-ssl \
            --with-sqlite3 \
            --without-berkeley-db \
            --with-utf8proc=internal \
            "${configure_options}"

        echo "Building Subversion ${version} with ${concurrency} parallel jobs..."
        make -j"${concurrency}"

        echo "Installing Subversion ${version} to ${prefix}..."
        make install

        # Verify installation
        if [ -x "${prefix}/bin/svn" ]; then
            echo "Subversion ${version} installation successful!"
        else
            echo "Subversion installation failed. The svn binary was not created."
            exit 1
        fi
    ) || (
        echo "Subversion installation failed. See error messages above."
        exit 1
    )
}

# Main
echo "Installing Subversion version ${ASDF_INSTALL_VERSION}..."
check_build_dependencies
install_from_source "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
